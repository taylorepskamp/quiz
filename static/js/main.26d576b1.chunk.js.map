{"version":3,"sources":["images/background.jpg","API.ts","utils.ts","components/QuestonCard.styles.ts","components/questioncard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","Total_Questions","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26d576b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.37346eb8.jpg\";","\nimport { shuffleArray } from './utils';\n\nexport type Question = {\n   category: string;\n   correct_answer: string;\n   difficulty: string;\n   incorrect_answers: string[];\n   question: string;\n   type: string;\n}\n\nexport type QuestionState = Question & { answers: string[]}\n\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\",\n}\n\n\n export const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    return data.results.map((question: Question) => (\n       {\n          ...question,\n          answers: shuffleArray([\n                     ...question.incorrect_answers, \n                     question.correct_answer])\n       }\n    ))\n    console.log(data);\n }\n\n","export const shuffleArray = (array: any[]) =>\n    [...array].sort(()=> Math.random() - 0.5);","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    max-width: 1100px;\n    background: #ebfeff;\n    border-radius: 10px;\n    border 2px solid #0085a3;\n    padding: 20px;\n    box-shadow: 0px 5px 10px rgba(0,0,0,0, 0.25);\n    text-align: center;\n\n    p {\n        font-size: 1rem;\n    }\n`;\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div <ButtonWrapperProps>`\n    transition: all 0.3s ease;\n    :hover{\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer\n        user-select: none;\n        font-size: 0.8rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) =>\n            correct \n                ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n                    :!correct && userClicked\n                ? 'linear-gradient(90deg, #ff5656, #c16868)'\n                    :'linear-gradient(90deg, #56CCFF, #6EAFB4)'};\n        border: 3px solid #fff;\n        box-shadow: 1px 2px 0px rgba(0,0,0,0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0px 1px 0px rgba(0,0,0,0.25);\n    }\n`;","import React from 'react';\n//styles\nimport {Wrapper, ButtonWrapper} from './QuestonCard.styles';\n//Types\nimport {AnswerObject} from '../App';\n//Styles\n//import {Wrapper, ButtonWrapper} from './QuestionCard.styles'\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNr: number;\n    totalQuestions: number; \n}\n\nconst QuestionCard: React.FC<Props> = ({question,answers,callback,userAnswer,questionNr,totalQuestions}) => \n(<Wrapper> \n    <p className=\"number\">\n        Question: {questionNr} /{totalQuestions}\n    </p>\n\n    <p dangerouslySetInnerHTML={{ __html: question}}/>\n        <div>\n            {answers.map(answer => (\n                <ButtonWrapper key = {answer} correct={userAnswer?.correctAnswer === answer} userClicked={userAnswer?.answer === answer}>\n                    <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n                        <span dangerouslySetInnerHTML={{__html:answer}} />\n                    </button>\n                </ButtonWrapper>\n            ))}\n        </div>\n</Wrapper>);\n\nexport default QuestionCard","import styled, {createGlobalStyle} from 'styled-components';\nimport BGImage from './images/background.jpg'; \n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n    }\n\n    body {\n        background-image: url(${BGImage});\n        background-size: cover;\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content: center;\n    }\n\n    * {\n        box-sizing: border-box;\n        font-family: 'Catamaran', sans-serif;\n    }\n`;\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    > p {\n        color: #fff;\n    }\n\n    .score {\n        color: #fff;\n        font-size: 2rem;\n        margin: 0;\n    }\n\n    h1 {\n        font-family: Fascinate Inline;\n        background-image: linear-gradient(180deg,#fff,#87f1ff);\n        background-size: 100%;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -moz-background-clip: text;\n        -moz-text-fill-color: transparent;\n        filter: drop-shadow(2px 2px #0085a3);\n        font-size: 70px;\n        font-weight: 400\n        text-align: center;\n        margin: 20px;\n    }\n    .start, \n    \n    .next{\n        cursor: pointer;\n        background: linear-gradient(180deg,#fff,#ffcc91);\n        border: 2px solid #d38558;\n        box-shadow: 0px 5px 10px rgba(0,0,0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n    }\n\n    .start {\n        max-width: 200px;\n    }\n`;","import React, {useState} from 'react';\nimport {fetchQuizQuestions } from './API';\n//Components\nimport QuestionCard from './components/questioncard';\n//Types\n \nimport { QuestionState, Difficulty} from './API';\n//Styles\nimport { GlobalStyle, Wrapper } from './App.styles'\n\nexport type AnswerObject = {\n    question: string;\n    answer: string;\n    correct: boolean;\n    correctAnswer: string;\n\n}\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score,setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const Total_Questions = 10;\n\n  //console.log(fetchQuizQuestions(Total_Questions, Difficulty.EASY))\n  console.log(questions)\n\n  const startTrivia = async () => {\n      setLoading(true);\n      setGameOver(false);\n\n      const newQuestions = await fetchQuizQuestions(\n        Total_Questions,\n        Difficulty.EASY\n      );\n\n      setQuestions(newQuestions);\n      setScore(0);\n      setUserAnswers([]);\n      setNumber(0);\n      setLoading(false);\n\n\n\n  }\n\n  const checkAnswer =  (e: React.MouseEvent<HTMLButtonElement>) => {\n    if(!gameOver){\n      //users answer\n      const answer = e.currentTarget.value\n      // check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      //Add score if answer is correct\n      if (correct) {setScore(prev => prev + 1)}\n      //Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      }\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n\n  }\n\n  const nextQuestion = () => {\n      //Move on to the next question if not last one\n      const nextQuestion = number + 1;\n      if(nextQuestion === Total_Questions) {\n        setGameOver(true)\n      }\n      else {setNumber(nextQuestion)\n      }\n\n  }\n\n  return (\n    <>\n    < GlobalStyle />\n    < Wrapper> \n      <h1>React Quiz</h1>\n      { gameOver || userAnswers.length === Total_Questions ? (\n      <button className=\"start\" onClick={startTrivia}>\n        Start\n      </button>\n      ) : null }\n      { !gameOver ? <p className=\"score\">Score: {score}</p> : null }\n\n      {loading ? <p>Loading Questions ...</p> : null}\n      {!loading && !gameOver ? (<QuestionCard \n        questionNr = {number + 1}\n        totalQuestions={Total_Questions}\n        question = {questions[number].question}\n        answers={questions[number].answers}\n        userAnswer={userAnswers ? userAnswers[number] : undefined}\n        callback ={checkAnswer}\n      />) : null }\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== Total_Questions - 1 ? (\n        <button className=\"next\" onClick={nextQuestion}>\n          Next Question\n        </button>\n      ) : null }\n    </ Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}